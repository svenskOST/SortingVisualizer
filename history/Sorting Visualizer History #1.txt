using System;
using System.Drawing;
using System.Windows.Forms;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Rebar;
using System.Linq;

namespace Sorting_Visualizer
{
    public partial class MainForm : Form
    {
        Rectangle[][] Frames { get; set; }
        private int PanelWidth { get; set; }
        private int PanelHeight { get; set; }
        private int RectWidth { get; set; }

        static int speed = 100;

        public MainForm()
        {
            InitializeComponent();
            InitializeData();
        }

        private void InitializeData()
        {
            Frames = new Rectangle[1][];
            Random rand = new Random();
            Frames[0] = new Rectangle[SizeTrackBar.Value];

            PanelWidth = VisualizerPanel.Width;
            PanelHeight = VisualizerPanel.Height;
            RectWidth = PanelWidth / Frames[0].Length;

            int positionX = 0;
            for (int i = 0; i < Frames[0].Length; i++)
            {
                int rectHeight = rand.Next(0, PanelHeight);
                Frames[0][i] = new Rectangle(positionX, PanelHeight - rectHeight, RectWidth, rectHeight);
                positionX += RectWidth;
            }

            VisualizerPanel.Invalidate();
        }

        private void SetMinMax()
        {
            if (VisualizerPanel.Width < 1000)
            {
                SizeTrackBar.Maximum = 738;
                SizeTrackBar.Value = 200;
            }
            else
            {
                SizeTrackBar.Maximum = 1520;
                SizeTrackBar.Value = 400;
            }
            InitializeData();
        }

        private void LogSize()
        {
            SizeLabel2.Text = SizeTrackBar.Value.ToString();
        }

        private void SetSpeed()
        {
            switch (SpeedTrackBar.Value)
            {
                case 0:
                    speed = 1000;
                    break;
                case 1:
                    speed = 500;
                    break;
                case 2:
                    speed = 100;
                    break;
                case 3:
                    speed = 50;
                    break;
                case 4:
                    speed = 0;
                    break;
            }
        }

        private void RefreshFrame()
        {
            Graphics graphics = VisualizerPanel.CreateGraphics();
            graphics.FillRectangles(new SolidBrush(Color.White), Frames[Frames.Length - 1]);
        }

        private async void DisplayFrames()
        {
            for (int i = 1; i < Frames.Length; i++)
            {
                await Task.Run(() =>
                {
                    VisualizerPanel.Invalidate();

                    Thread.Sleep(speed);
                });
            }
        }

        private void Sort()
        {
            switch (AlgorithmComboBox.Text)
            {
                case "Quicksort":
                    Quicksort();
                    break;
                case "Bubble sort":
                    BubbleSort();
                    break;
                default:
                    MessageBox.Show("Please select an algorithm");
                    break;
            }
        }

        private void Quicksort()
        {
            Stack<int> stack = new Stack<int>();
            stack.Push(0);
            stack.Push(Frames[0].Length - 1);

            while (stack.Count > 0)
            {
                int high = stack.Pop();
                int low = stack.Pop();

                if (low < high)
                {
                    int partitionIndex = Partition(low, high);

                    stack.Push(low);
                    stack.Push(partitionIndex - 1);

                    stack.Push(partitionIndex + 1);
                    stack.Push(high);

                    Frames = Frames.Concat(new[] { Frames[Frames.Length - 1].ToArray() }).ToArray();
                }
            }

            DisplayFrames();

            int Partition(int low, int high)
            {
                int pivot = Frames[Frames.Length - 1][high].Height;
                int i = low - 1;

                for (int j = low; j < high; j++)
                {
                    if (Frames[Frames.Length - 1][j].Height <= pivot)
                    {
                        i++;
                        Swap(i, j);
                    }
                }

                Swap(i + 1, high);

                return i + 1;
            }

            void Swap(int i, int j)
            {
                (Frames[Frames.Length - 1][j].Height, Frames[Frames.Length - 1][i].Height) = (Frames[Frames.Length - 1][i].Height, Frames[Frames.Length - 1][j].Height);
            }
        }

        private void BubbleSort()
        {

        }

        private void MainForm_Resize(object sender, EventArgs e)
        {
            SetMinMax();
        }

        private void SortButton_Click(object sender, EventArgs e)
        {
            Sort();
        }

        private void ResetButton_Click(object sender, EventArgs e)
        {
            InitializeData();
        }

        private void SizeTrackBar_Scroll(object sender, EventArgs e)
        {
            LogSize();
        }

        private void SpeedTrackBar_Scroll(object sender, EventArgs e)
        {
            SetSpeed();
        }

        private void VisualizerPanel_Paint(object sender, PaintEventArgs e)
        {
            RefreshFrame();
        }
    }
}